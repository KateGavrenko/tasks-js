.none {
	display: none !important;
}

body {
	background:rgba(0, 102, 255, 0.38);
	font-family: sans-serif;
}
p{
	margin: 0 0 5px;
}
.article {
	background: #FFF;
	border: 1px solid rgba(0, 89, 181, 0.82);
	width: 600px;
	margin: 0 0 5px;
	box-shadow: 2px 2px 5px -1px rgb(0, 81, 202);
	padding: 3px 5px;
}
.news__author {
	text-decoration: underline;
	color: #007DDC;
}
.news__count {
	margin: 10px 0 0 0;
	display: block;
}
.test-input{
	margin: 0 5px 5px 0;
}

.add{
	margin: 0 5px 5px 0;
	width: 210px;
	border: 1px dashed rgba(0, 89, 181, 0.82);
	padding: 5px;
}
.add__author, .add__text, .add__btn, .add__ckeckrule{
	display: block;
	margin: 0 0 5px 0;
	padding: 5px;
	width: 94%;
	border: 1px dashed rgba(0, 89, 181, 0.82);
}
.add__checkrule{
	border: none;
	font-size: 12px;
}
.add__btn{
	box-sizing: content-box;
	color: #fff;
	text-transform: uppercase;
	background: #007DDC;
}

.add__btn:disabled{
	color: #ccc;
	background: #999;
}


table, th, td {
	border: 1px solid black;
	border-collapse: collapse;
}
th, td {
    padding: 5px;
	text-align: center;    
}


function compareValues(key, order='asc') {
  return function(a, b) {
    if(!a.hasOwnProperty(key) || 
       !b.hasOwnProperty(key)) {
  	  return 0; 
    }
    
    const varA = (typeof a[key] === 'string') ? 
      a[key].toUpperCase() : a[key];
    const varB = (typeof b[key] === 'string') ? 
      b[key].toUpperCase() : b[key];
      
    let comparison = 0;
    if (varA > varB) {
      comparison = 1;
    } else if (varA < varB) {
      comparison = -1;
    }
    return (
      (order == 'desc') ? 
      (comparison * -1) : comparison
    );
  };
}

console.log(
  bands.sort(compareValues('band', 'desc'))
); 